buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath libs.gradle
    }
}

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.android.junit5)
}

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = stdout
        }
        return Integer.valueOf(stdout.toString().trim())
    } catch (ignored) {
        return null
    }
}

android {
    defaultConfig {
        compileSdk 34
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 42
        versionName "4.1.0"
        applicationId "de.storchp.opentracks.osmplugin"

        testInstrumentationRunnerArguments runnerBuilder: 'de.mannodermaus.junit5.AndroidJUnit5Builder'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        nightly {
            if (System.getProperty("nightly_store_file") != null) {
                storeFile file(System.getProperty("nightly_store_file"))
                storePassword System.getProperty("nightly_store_password")
                keyAlias System.getProperty("nightly_key_alias")
                keyPassword System.getProperty("nightly_key_password")
            }
        }
    }
    compileOptions {
        // Sets Java compatibility to Java 17
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    productFlavors {
        full {
            applicationId "de.storchp.opentracks.osmplugin"
            buildConfigField "boolean", "offline", "false"
            flavorDimensions = ["default"]
        }
        offline {
            applicationId "de.storchp.opentracks.osmplugin.offline"
            buildConfigField "boolean", "offline", "true"
            flavorDimensions = ["default"]
        }
    }
    flavorDimensions = ["default"]
    sourceSets {
        full {
            manifest.srcFile "src/full/AndroidManifest.xml"
        }
        offline {
            manifest.srcFile "src/offline/AndroidManifest.xml"
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        nightly {
            signingConfig signingConfigs.nightly
            applicationIdSuffix ".nightly"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    lint {
        disable 'MissingTranslation'
    }
    namespace 'de.storchp.opentracks.osmplugin'
    applicationVariants.configureEach { variant ->
        variant.resValue "string", "applicationId", variant.applicationId

        if (variant.buildType.name == 'nightly') {
            variant.outputs.configureEach {
                setVersionCodeOverride(getVersionCode())
                setVersionNameOverride(versionName + "-" + versionCode)
            }
        }
        variant.outputs.configureEach {
            outputFileName = "${applicationId}_${variant.versionCode}.apk"
        }
    }
}

dependencies {

    // Desugaring
    coreLibraryDesugaring libs.desugar.jdk.libs

    // AndroidX
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.appcompat
    implementation libs.documentfile
    implementation libs.preference.ktx
    implementation libs.constraintlayout
    implementation libs.material

    // VTM
    implementation libs.vtm
    implementation libs.vtm.themes
    implementation libs.vtm.http
    implementation libs.slf4j.api
    runtimeOnly(libs.vtm.android) {
        artifact {
            classifier = "natives-armeabi-v7a"
        }
    }
    runtimeOnly(libs.vtm.android) {
        artifact {
            classifier = "natives-arm64-v8a"
        }
    }
    runtimeOnly(libs.vtm.android) {
        artifact {
            classifier = "natives-x86"
        }
    }
    runtimeOnly(libs.vtm.android) {
        artifact {
            classifier = "natives-x86_64"
        }
    }
    implementation libs.vtm.android
    implementation libs.androidsvg

    testImplementation libs.junit.jupiter
    testImplementation libs.assertj.core

    testRuntimeOnly libs.junit.jupiter.engine

    androidTestImplementation(libs.runner)
    androidTestImplementation(libs.junit.jupiter.api)
    androidTestImplementation(libs.android.test.core)

    androidTestRuntimeOnly(libs.android.test.runner)
}
